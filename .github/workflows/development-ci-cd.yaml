name: CI/CD

on: workflow_dispatch

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  build:
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          role-session-name: ${{ github.run_id }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # For real or production project, use SSM and/or Parameter Store to set up environment variables
      - name: Set up environment variables
        run: |
          aws s3 cp ${{ secrets.S3_BUCKET_URI_ENV_FILE }} src/.env

      # For real or production project, use another database (RDS, MongoDB, etc)
      # This is only for studies and testing purposes
      - name: Set up database
        run: |
          aws s3 cp ${{ secrets.S3_BUCKET_URI_DB_FILE }} src/database/database.sqlite

      - name: Build
        run: docker build -f dockerfiles/artifact.dockerfile -t ilaravel-deploy .

      - name: Tagging
        run: |
          docker tag ilaravel-deploy:latest ${{ secrets.ECR_REPOSITORY }}:latest
          docker tag ilaravel-deploy:latest ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Push to ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY }}:latest
          docker push ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
  deploy:
    runs-on: ubuntu-latest
    environment: development
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          role-session-name: ${{ github.run_id }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ vars.AWS_REGION }}

      - name: Deploy to EKS
        run: |
          # Atualiza a imagem no deployment com a tag única
          kubectl set image deployment/laravel-app laravel-app=${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

          # Aplica o deployment
          kubectl apply -f kubernetes/laravel-app.yaml

          # Força o rollout para garantir que os pods sejam atualizados
          kubectl rollout restart deployment/laravel-app

          # Aguarda o rollout ser completado
          kubectl rollout status deployment/laravel-app --timeout=300s
